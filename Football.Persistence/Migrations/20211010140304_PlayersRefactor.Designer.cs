// <auto-generated />
using System;
using Football.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Football.Persistence.Migrations
{
    [DbContext(typeof(FootballDbContext))]
    [Migration("20211010140304_PlayersRefactor")]
    partial class PlayersRefactor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Football.Domain.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LeagueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeagueProgress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchesCompleted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalMatches")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Football.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoundId")
                        .HasColumnType("int");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Football.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assists")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Goals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchesPlayed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinutesPlayed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedCards")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartedFromBegin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("YellowCards")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Football.Domain.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("RoundNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("Football.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvgGoalsPerMacth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvgPossession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CleanSheets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Draws")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalBalance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalConceded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalScored")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalsConcededPerMacth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalsScoredPerMatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeagueId")
                        .HasColumnType("int");

                    b.Property<string>("Losses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MacthesHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matches")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Points")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Standing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wins")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Football.Domain.Entities.Match", b =>
                {
                    b.HasOne("Football.Domain.Entities.Round", "Round")
                        .WithMany("Matches")
                        .HasForeignKey("RoundId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Football.Domain.Entities.Player", b =>
                {
                    b.HasOne("Football.Domain.Entities.Team", null)
                        .WithMany("Players")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Football.Domain.Entities.Round", b =>
                {
                    b.HasOne("Football.Domain.Entities.League", "League")
                        .WithMany("Rounds")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("Football.Domain.Entities.Team", b =>
                {
                    b.HasOne("Football.Domain.Entities.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId");

                    b.Navigation("League");
                });

            modelBuilder.Entity("Football.Domain.Entities.League", b =>
                {
                    b.Navigation("Rounds");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Football.Domain.Entities.Round", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Football.Domain.Entities.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
